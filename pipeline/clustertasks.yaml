apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  creationTimestamp: "2023-11-25T04:32:06Z"
  generation: 1
  managedFields:
  - apiVersion: tekton.dev/v1beta1
    fieldsType: FieldsV1
    fieldsV1:
      f:spec:
        .: {}
        f:params: {}
        f:results: {}
        f:steps: {}
        f:workspaces: {}
    manager: OpenAPI-Generator
    operation: Update
    time: "2023-11-25T04:32:06Z"
  name: rox-deployment-check
  resourceVersion: "78773"
  selfLink: /apis/tekton.dev/v1beta1/clustertasks/rox-deployment-check
  uid: 8105ba59-1eec-431e-900a-d7a089a903e6
spec:
  params:
  - name: GIT_REPOSITORY
    type: string
  - description: Secret containing the address:port tuple for StackRox Central (example - rox.stackrox.io:443)
    name: rox_central_endpoint
    type: string
  - description: Secret containing the StackRox API token with CI permissions
    name: rox_api_token
    type: string
  - description: YAML file in the deployfiles workspace
    name: file
    type: string
  - description: Path/Folder for the k8s deployment files to check
    name: deployment_files_path
    type: string
  results:
  - description: Output of `roxctl deployment check`
    name: check_output
  steps:
  - image: quay.io/rcarrata/git:v2.26.2
    name: git-clone
    resources: {}
    script: |
      rm -rf git-update-digest-workdir
      git clone $(params.GIT_REPOSITORY) git-update-digest-workdir
      cd git-update-digest-workdir/$(params.deployment_files_path)
    workingDir: $(workspaces.workspace.path)
  - env:
    - name: ROX_API_TOKEN
      valueFrom:
        secretKeyRef:
          key: rox_api_token
          name: $(params.rox_api_token)
    - name: ROX_CENTRAL_ENDPOINT
      valueFrom:
        secretKeyRef:
          key: rox_central_endpoint
          name: $(params.rox_central_endpoint)
    image: registry.access.redhat.com/ubi8/ubi-minimal:latest
    name: rox-deployment-check
    resources: {}
    script: |
      #!/usr/bin/env bash
      set +x
      cd git-update-digest-workdir/$(params.deployment_files_path)
      cat $(params.file)
      curl -k -L -H "Authorization: Bearer $ROX_API_TOKEN" https://$ROX_CENTRAL_ENDPOINT/api/cli/download/roxctl-linux --output ./roxctl  > /dev/null; echo "Getting roxctl"
      chmod +x ./roxctl  > /dev/null
      ./roxctl deployment check --insecure-skip-tls-verify -e $ROX_CENTRAL_ENDPOINT -f $(params.file)
    workingDir: $(workspaces.workspace.path)
  workspaces:
  - description: The workspace consisting of maven project.
    name: workspace
---
apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  creationTimestamp: "2023-11-25T04:32:07Z"
  generation: 1
  managedFields:
  - apiVersion: tekton.dev/v1beta1
    fieldsType: FieldsV1
    fieldsV1:
      f:spec:
        .: {}
        f:params: {}
        f:results: {}
        f:steps: {}
    manager: OpenAPI-Generator
    operation: Update
    time: "2023-11-25T04:32:07Z"
  name: rox-image-check
  resourceVersion: "78789"
  selfLink: /apis/tekton.dev/v1beta1/clustertasks/rox-image-check
  uid: 551baec7-8063-4f46-8ace-83001bd3ec3d
spec:
  params:
  - description: Secret containing the address:port tuple for StackRox Central (example - rox.stackrox.io:443)
    name: rox_central_endpoint
    type: string
  - description: Secret containing the StackRox API token with CI permissions
    name: rox_api_token
    type: string
  - description: Full name of image to scan (example -- gcr.io/rox/sample:5.0-rc1)
    name: image
    type: string
  - description: Digest in sha256 hash format of the image to check
    name: image_digest
    type: string
  results:
  - description: Output of `roxctl image check`
    name: check_output
  steps:
  - env:
    - name: ROX_API_TOKEN
      valueFrom:
        secretKeyRef:
          key: rox_api_token
          name: $(params.rox_api_token)
    - name: ROX_CENTRAL_ENDPOINT
      valueFrom:
        secretKeyRef:
          key: rox_central_endpoint
          name: $(params.rox_central_endpoint)
    image: registry.access.redhat.com/ubi8/ubi-minimal:latest
    name: rox-image-check
    resources: {}
    script: |-
      #!/usr/bin/env bash
      set +x
      curl -k -L -H "Authorization: Bearer $ROX_API_TOKEN" https://$ROX_CENTRAL_ENDPOINT/api/cli/download/roxctl-linux --output ./roxctl  > /dev/null; echo "Getting roxctl"
      chmod +x ./roxctl  > /dev/null
      ./roxctl image check --insecure-skip-tls-verify -e $ROX_CENTRAL_ENDPOINT --image $(params.image)@$(params.image_digest)
---
apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  creationTimestamp: "2023-11-25T04:32:01Z"
  generation: 1
  managedFields:
  - apiVersion: tekton.dev/v1beta1
    fieldsType: FieldsV1
    fieldsV1:
      f:spec:
        .: {}
        f:params: {}
        f:steps: {}
    manager: OpenAPI-Generator
    operation: Update
    time: "2023-11-25T04:32:01Z"
  name: rox-image-scan
  resourceVersion: "78702"
  selfLink: /apis/tekton.dev/v1beta1/clustertasks/rox-image-scan
  uid: 593e543c-3bd9-46d9-ae2c-5b9faff96faa
spec:
  params:
  - description: Secret containing the address:port tuple for StackRox Central (example - rox.stackrox.io:443)
    name: rox_central_endpoint
    type: string
  - description: Secret containing the StackRox API token with CI permissions
    name: rox_api_token
    type: string
  - description: Full name of image to scan (example -- gcr.io/rox/sample:5.0-rc1)
    name: image
    type: string
  - default: json
    description: Output format (json | csv | pretty)
    name: output_format
    type: string
  - description: Digest in sha256 hash format of the image to scan
    name: image_digest
    type: string
  steps:
  - env:
    - name: ROX_API_TOKEN
      valueFrom:
        secretKeyRef:
          key: rox_api_token
          name: $(params.rox_api_token)
    - name: ROX_CENTRAL_ENDPOINT
      valueFrom:
        secretKeyRef:
          key: rox_central_endpoint
          name: $(params.rox_central_endpoint)
    image: registry.access.redhat.com/ubi8/ubi-minimal:latest
    name: rox-image-scan
    resources: {}
    script: |
      #!/usr/bin/env bash
      set +x
      export NO_COLOR="True"
      curl -k -L -H "Authorization: Bearer $ROX_API_TOKEN" https://$ROX_CENTRAL_ENDPOINT/api/cli/download/roxctl-linux --output ./roxctl  > /dev/null; echo "Getting roxctl"
      chmod +x ./roxctl > /dev/null
      echo "## Scanning image $(params.image)@$(params.image_digest)"
      ./roxctl image scan --insecure-skip-tls-verify -e $ROX_CENTRAL_ENDPOINT --image $(params.image)@$(params.image_digest) --format $(params.output_format)
      echo "## Go to https://$ROX_CENTRAL_ENDPOINT/main/vulnerability-management/image/$(params.image_digest) to check more info"
